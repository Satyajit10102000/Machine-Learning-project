import numpy as np
import pandas as pd
import seaborn as sns
from sklearn import svm

df = pd.read_csv("LOAN.csv")

df.head()

df.info()

df.isnull().sum()

df['loanAmount_log'] = np.log(df['LoanAmount'])
df['loanAmount_log'].hist(hins=20)

df.isnull().sum()

df['TotalIncome']= df['ApplicantIncome']+ df['CoapplicantIncome']
df['TotalIncome_log']= np.log(df['TotalIncome'])
df['TotalIncome_log'].hist(bins=20)

df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)
df['Married'].filna(df['Married'].mode()[0],inplace=True)
df['Self_Employed'].fillna(df['Self_Employed'].mode()[0],inplace=True)
df['Dependents'].fillna(df['Dependents'].mode()[0],inplace=True)

df.LoanAmount = df.LoanAmount.fillna(df.LoanAmount.mean())
df.loanAmount_log = df.loanAmount_log.fillna(df.loanAmount_log.mean())

df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0],inplace=True)
df['Credit_History'].fillna(df['Credit_History'].mode()[0],inplace=True)

df.isnull().sum()

x= df.iloc[;,np.r_[1:5,9:11,13:15]].values
y=df.iloc[:,12].values

x

print("per of missing gender is %2f%% " %((df['Gender'].isnull().sum()/df.shape[0])*100))


print("number of people who take loan as group by gender:")
print(df['Gender'].value_count())
sns.countplot(x='Gender', data=df, palette = 'Set1')

print("number of people who take loan as group by marital status:")
print(df['Married'].value_counts())
sns.countplot(x='Married',data=df,palette = 'Set1')

print("number of people who take loan as group by dependents:")
print(df['Dependents'].value_counts())
sns.countplot(x='Dependents',data=df,palette='Set1')

print("number of people who take loan as group by gender:")
print(df['Gender'].value_counts())
sns.countplot(x='Gender',data=df,palette='Set1')

print("number of people who take loan as group by Credit history:")
print(df['Gender'].value_counts())
sns.countplot(x='Gender',data=df,palette='Set1')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import Label Encoder
Labellencoder_x = LabelEncoder()

for i in range(0,5):
  X_train[:,i]= Labelencoder_x.fit_transform(X_train[:,i])
  X_train[:,7]= Labelencoder_x.fit_transform(X_train[:,7])

X_train

Labelencoder_y = LabelEncoder()
y_train = Labelencoder_y.fit_transform(y_train)

y_train

for i in range(0,5):
  X_test[:,i]= Labelencoder_x.fit_transform(X_test[:,i])
  X_test[:,7]= Labelencoder_x.fit_transform(X_test[:,7])

X_test

labelencoder_y = LabelEncoder()

y_test= Labelencoder_y.fit_transform(y_test)from sklearn.preprocessing import StandardScalar

ss = StandardScalar()
X_train = ss.fit_transform(X_train)
x_test = ss.fit_transform(X_test)

from sklearn.ensemble import RandomForestClassifier

rf_clf = RandomForestClassifier()
rf_clf.fit(X_train, y_train)

from sklearn import metrics
y_pred = rf_clf.predict(x_test)

print("acc of random forest clf is ", metrics.accuracy_score(y_pred, y_test))

y_pred

from sklearn.naive_bayes import GaussianNB
nb_clf = GaussianNB()
nb_clf.fit(X_train, y_train)

y_pred = nb_classifier.predict(X_test)

y_pred



y_test

from sklearn.preprocessing import StandardScalar

ss = StandardScalar()
X_train = ss.fit_transform(X_train)
x_test = ss.fit_transform(X_test)

from sklearn.ensemble import RandomForestClassifier

rf_clf = RandomForestClassifier()
rf_clf.fit(X_train, y_train)

from sklearn import metrics
y_pred = rf_clf.predict(x_test)

print("acc of random forest clf is ", metrics.accuracy_score(y_pred, y_test))

y_pred

from sklearn.naive_bayes import GaussianNB
nb_clf = GaussianNB()
nb_clf.fit(X_train, y_train)

print("acc of gaussianNB is %", metrics.accuracy_score(y_pred,y_test))

y_pred

from sklearn.tree import DecisionTreeClassifier
dt_clf = DecisionTreeClassifer()
dt_clf.fit(X_train, y_train)

y_pred = dt_clf.predict(X_test)
print("acc of DT is ", metrics.accuracy_score(y_pred,y_test))

y_pred

from sklearn.neighbors import KNeighborsClassifier
kn_clf = KneighborsClassifier()
kn_clf.fit(X_train, y_train)

y_pred = kn_clf.predict(X_test)
print("acc of KN is ", metrics.accuracy_score(y_pred,y_test))
